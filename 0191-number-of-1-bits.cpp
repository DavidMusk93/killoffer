//
// Created by Steve on 10/9/2020.
//

#include "solver_ex.h"

static const unsigned char table[]={
        0,0x1,0x1,0x2,0x1,0x2,0x2,0x3,0x1,0x2,0x2,0x3,0x2,0x3,0x3,0x4,
        0x1,0x2,0x2,0x3,0x2,0x3,0x3,0x4,0x2,0x3,0x3,0x4,0x3,0x4,0x4,0x5,
        0x1,0x2,0x2,0x3,0x2,0x3,0x3,0x4,0x2,0x3,0x3,0x4,0x3,0x4,0x4,0x5,
        0x2,0x3,0x3,0x4,0x3,0x4,0x4,0x5,0x3,0x4,0x4,0x5,0x4,0x5,0x5,0x6,
        0x1,0x2,0x2,0x3,0x2,0x3,0x3,0x4,0x2,0x3,0x3,0x4,0x3,0x4,0x4,0x5,
        0x2,0x3,0x3,0x4,0x3,0x4,0x4,0x5,0x3,0x4,0x4,0x5,0x4,0x5,0x5,0x6,
        0x2,0x3,0x3,0x4,0x3,0x4,0x4,0x5,0x3,0x4,0x4,0x5,0x4,0x5,0x5,0x6,
        0x3,0x4,0x4,0x5,0x4,0x5,0x5,0x6,0x4,0x5,0x5,0x6,0x5,0x6,0x6,0x7,
        0x1,0x2,0x2,0x3,0x2,0x3,0x3,0x4,0x2,0x3,0x3,0x4,0x3,0x4,0x4,0x5,
        0x2,0x3,0x3,0x4,0x3,0x4,0x4,0x5,0x3,0x4,0x4,0x5,0x4,0x5,0x5,0x6,
        0x2,0x3,0x3,0x4,0x3,0x4,0x4,0x5,0x3,0x4,0x4,0x5,0x4,0x5,0x5,0x6,
        0x3,0x4,0x4,0x5,0x4,0x5,0x5,0x6,0x4,0x5,0x5,0x6,0x5,0x6,0x6,0x7,
        0x2,0x3,0x3,0x4,0x3,0x4,0x4,0x5,0x3,0x4,0x4,0x5,0x4,0x5,0x5,0x6,
        0x3,0x4,0x4,0x5,0x4,0x5,0x5,0x6,0x4,0x5,0x5,0x6,0x5,0x6,0x6,0x7,
        0x3,0x4,0x4,0x5,0x4,0x5,0x5,0x6,0x4,0x5,0x5,0x6,0x5,0x6,0x6,0x7,
        0x4,0x5,0x5,0x6,0x5,0x6,0x6,0x7,0x5,0x6,0x6,0x7,0x6,0x7,0x7,0x8,
};

//static const unsigned char off[]={0,8,16,24};

class Solution {
public:
    int hammingWeight(uint32_t n) {
        int ans{};
//        for(unsigned char i=0;i<4;++i){
//
//        }
        if(n&0xff){
            ans+=table[static_cast<unsigned char>(n)];
        }
        if(n&0xff00){
            ans+=table[static_cast<unsigned char>(n>>8)];
        }
        if(n&0xff0000){
            ans+=table[static_cast<unsigned char>(n>>16)];
        }
        if(n&0xff000000){
            ans+=table[static_cast<unsigned char>(n>>24)];
        }
        return ans;
    }
};

#if 0
MAIN(){
    using u8=unsigned char;
    static const u8 mask[]={
            1u<<0,
            1u<<1,
            1u<<2,
            1u<<3,
            1u<<4,
            1u<<5,
            1u<<6,
            1u<<7,};
    auto fn=[](u8 x){
        u8 y{};
        for(u8 i=0;i<8;++i){
            if(x&mask[i]){
                ++y;
            }
        }
        return y;
    };
    for(int i=0;i<0x100;++i){
        printf("%#x,",fn(i));
        if((i+1)%16==0){
            putchar('\n');
        }
    }
}
#endif